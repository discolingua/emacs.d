;; turn off unused GUI bits
(menu-bar-mode -1)
(blink-cursor-mode -1)
(setq inhibit-splash-screen t)
(setq initial-scratch-message nil)
(setq echo-keystrokes 0.1)
(defalias 'yes-or-no-p 'y-or-n-p)

;; misc visual/layout
(setq-default indent-tabs-mode nil) ; always replace tabs with spaces
(setq-default tab-width 4)          ; set tab width to 4 for all buffers
(setq c-basic-offset 4)
(setq cperl-indent-level 4)
(setq ruby-indent-level 4)


;; word count function (courtesy djcb @ emacs-fu.blogspot.com)
;;(defun count-words (&optional begin end)
;;  "count words between BEGIN and END (region); if no region defined, count words in buffer"
;;  (interactive "r")
;;  (let ((b (if mark-active begin (point-min)))
;;	(e (if mark-active end (point-max))))
;;    (message "Word count: %s" (how-many "\\w+" b e))))


;; set load paths, ~/.emacs.d/lisp/ and subdirs
(let ((default-directory "~/.emacs.d/lisp/")) 
      (normal-top-level-add-to-load-path '("."))
      (normal-top-level-add-subdirs-to-load-path))

(require 'package)
(add-to-list 'package-archives
	     '("melpa" . "http://melpa.milkbox.net/packages/") t)
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

; (yas-global-mode 1) ; enable YASnippet templates

;; LANGUAGE SPECIFIC STUFF ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; SLIME (for Common Lisp)
(setq inferior-lisp-program "/usr/local/bin/clisp")
    (require 'slime)
    (slime-setup '(slime-fancy))

; tads-mode (for authoring text adventures)
(autoload 'tads-mode "tads-mode" "TADS editing mode." t)
(setq auto-mode-alist
      (append (list (cons "\\.t$" 'tads-mode))
	      auto-mode-alist))

(require 'haxe-mode)
(require 'lua-mode)
(require 'go-mode)

(require 'ess-site) ; ESS-mode for statistics (e.g. R)
(setq ess-directory "~/Development/R/")


; Processing
(autoload 'processing-mode "processing-mode" "Processing mode" t)
(add-to-list 'auto-mode-alist '("\\.pde$" . processing-mode))
(setq processing-location "/usr/bin/processing-java")
; (yas-load-directory "~/emacs.d/snippets")
; (add-hook processing-mode-hook 'yas-minor-mode)


;; ORG-MODE EXPORT TO LATEX

(require 'org-latex)
(unless (boundp 'org-export-latex-classes)
  (setq org-export-latex-classes nil))
(add-to-list 'org-export-latex-classes
             '("article"
               "\\documentclass{article}"
               ("\\section{%s}" . "\\section*{%s}")))  


;; BITS AUTOGENERATED BY EMACS (CUSTOM-SET) ;;;;;;;;;;;;;;;

(custom-set-variables
 '(erc-nick "h_double")
 '(erc-server "irc.synirc.net")
; '(erc-server "irc.freenode.net")
 '(safe-local-variable-values (quote ((folded-file . t)))))

(custom-set-faces
 '(default ((t (:inherit nil :stipple nil :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 140 :width normal :foundry "apple" :family "Monaco")))))
 
(cond ((eq window-system 'ns) (require 'color-theme) ; only if windowed client
       (eval-after-load "color-theme"
	 '(progn
	    (server-start) ; server for emacsclient
        (tool-bar-mode -1)
        (scroll-bar-mode -1)
	    (menu-bar-mode 1)
	    (color-theme-initialize)
	    (color-theme-solarized-dark)))))


(put 'upcase-region 'disabled nil)
